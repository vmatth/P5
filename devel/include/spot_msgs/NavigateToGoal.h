// Generated by gencpp from file spot_msgs/NavigateToGoal.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_NAVIGATETOGOAL_H
#define SPOT_MSGS_MESSAGE_NAVIGATETOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct NavigateToGoal_
{
  typedef NavigateToGoal_<ContainerAllocator> Type;

  NavigateToGoal_()
    : upload_path()
    , navigate_to()
    , initial_localization_fiducial(false)
    , initial_localization_waypoint()  {
    }
  NavigateToGoal_(const ContainerAllocator& _alloc)
    : upload_path(_alloc)
    , navigate_to(_alloc)
    , initial_localization_fiducial(false)
    , initial_localization_waypoint(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _upload_path_type;
  _upload_path_type upload_path;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _navigate_to_type;
  _navigate_to_type navigate_to;

   typedef uint8_t _initial_localization_fiducial_type;
  _initial_localization_fiducial_type initial_localization_fiducial;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _initial_localization_waypoint_type;
  _initial_localization_waypoint_type initial_localization_waypoint;





  typedef boost::shared_ptr< ::spot_msgs::NavigateToGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::NavigateToGoal_<ContainerAllocator> const> ConstPtr;

}; // struct NavigateToGoal_

typedef ::spot_msgs::NavigateToGoal_<std::allocator<void> > NavigateToGoal;

typedef boost::shared_ptr< ::spot_msgs::NavigateToGoal > NavigateToGoalPtr;
typedef boost::shared_ptr< ::spot_msgs::NavigateToGoal const> NavigateToGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::NavigateToGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::NavigateToGoal_<ContainerAllocator1> & lhs, const ::spot_msgs::NavigateToGoal_<ContainerAllocator2> & rhs)
{
  return lhs.upload_path == rhs.upload_path &&
    lhs.navigate_to == rhs.navigate_to &&
    lhs.initial_localization_fiducial == rhs.initial_localization_fiducial &&
    lhs.initial_localization_waypoint == rhs.initial_localization_waypoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::NavigateToGoal_<ContainerAllocator1> & lhs, const ::spot_msgs::NavigateToGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::NavigateToGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::NavigateToGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::NavigateToGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9af434c1c55a1da6434e77de4087aaf";
  }

  static const char* value(const ::spot_msgs::NavigateToGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9af434c1c55a1daULL;
  static const uint64_t static_value2 = 0x6434e77de4087aafULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/NavigateToGoal";
  }

  static const char* value(const ::spot_msgs::NavigateToGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string upload_path # Absolute path to map_directory, which is downloaded from tablet controller\n"
"string navigate_to # Waypoint id string for where to go\n"
"bool initial_localization_fiducial   # Tells the initializer whether to use fiducials\n"
"string initial_localization_waypoint # Waypoint id to trigger localization \n"
;
  }

  static const char* value(const ::spot_msgs::NavigateToGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.upload_path);
      stream.next(m.navigate_to);
      stream.next(m.initial_localization_fiducial);
      stream.next(m.initial_localization_waypoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigateToGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::NavigateToGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::NavigateToGoal_<ContainerAllocator>& v)
  {
    s << indent << "upload_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.upload_path);
    s << indent << "navigate_to: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.navigate_to);
    s << indent << "initial_localization_fiducial: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initial_localization_fiducial);
    s << indent << "initial_localization_waypoint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.initial_localization_waypoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_NAVIGATETOGOAL_H
